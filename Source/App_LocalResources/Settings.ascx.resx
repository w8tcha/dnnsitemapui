<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="$this.TrayLargeIcon" type="System.Boolean, mscorlib">
    <value>False</value>
  </data>
  <data name="$this.TrayAutoArrange" type="System.Boolean, mscorlib">
    <value>True</value>
  </data>
  <assembly alias="System" name="System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="$this.DefaultModifiers" type="System.CodeDom.MemberAttributes, System">
    <value>Private</value>
  </data>
  <data name="lblMaxLevel.Help" xml:space="preserve">
    <value>Set The Maximum Levels that the SiteMap renders. "-1" is Unlimited.</value>
  </data>
  <data name="lblMaxLevel.Text" xml:space="preserve">
    <value>Maximum Render Level</value>
  </data>
  <data name="lblStartRenderCt.Help" xml:space="preserve">
    <value>Shows only Sites from Current Level</value>
  </data>
  <data name="lblStartRenderCt.Text" xml:space="preserve">
    <value>Start From Current Level</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>Here you can modify all Settings for the Module.</value>
  </data>
  <data name="lblShowHidden.Help" xml:space="preserve">
    <value>SiteMap displays Tabs that are marked as "hidden".</value>
  </data>
  <data name="lblShowHidden.Text" xml:space="preserve">
    <value>Show Hidden Tabs</value>
  </data>
  <data name="lblShowTabIcons.Help" xml:space="preserve">
    <value>Shows the Tab Icons if there are available.</value>
  </data>
  <data name="lblShowTabIcons.Text" xml:space="preserve">
    <value>Show Tab Icons</value>
  </data>
  <data name="lblExcludeLst.Help" xml:space="preserve">
    <value>List with all Tabs, selected Tabs will be NOT shown in the SiteMap. WARNING: If you Exclude an Main Tab all Children Tabs will be also not displayed.</value>
  </data>
  <data name="lblExcludeLst.Text" xml:space="preserve">
    <value>Excluded Tabs</value>
  </data>
  <data name="btnSelectAll.Text" xml:space="preserve">
    <value>Select all</value>
  </data>
  <data name="btnSelectNone.Text" xml:space="preserve">
    <value>Select none</value>
  </data>
  <data name="lblSkin.Help" xml:space="preserve">
    <value>List with all available Skins for the SiteMap.</value>
  </data>
  <data name="lblSkin.Text" xml:space="preserve">
    <value>Skin Selection</value>
  </data>
  <data name="lblRender.Help" xml:space="preserve">
    <value>Display Sitemap Normally or as TreeView with Animation.</value>
  </data>
  <data name="lblRender.Text" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Error.Text" xml:space="preserve">
    <value>Value must be a Number!</value>
  </data>
  <data name="lblShowInfo.Help" xml:space="preserve">
    <value>Shows a Copyright Message at the End of the SiteMap.</value>
  </data>
  <data name="lblShowInfo.Text" xml:space="preserve">
    <value>Show Copyright Info</value>
  </data>
  <data name="lblRootLevel.Help" xml:space="preserve">
    <value>Select The Start Level for the Tabs. If you choose "Custom" you can select a Tab below.</value>
  </data>
  <data name="lblRootLevel.Text" xml:space="preserve">
    <value>Root Level</value>
  </data>
  <data name="lblRootTab.Help" xml:space="preserve">
    <value>Root Tab where the SiteMap start to render.</value>
  </data>
  <data name="lblRootTab.Text" xml:space="preserve">
    <value>Root Tab</value>
  </data>
  <data name="lExlOpt.Text" xml:space="preserve">
    <value>Exclude Settings</value>
  </data>
  <data name="lRenderOpt.Text" xml:space="preserve">
    <value>Render Settings</value>
  </data>
  <data name="lVislOpt.Text" xml:space="preserve">
    <value>Visual Settings</value>
  </data>
  <data name="lblAnimated.Help" xml:space="preserve">
    <value>Sets the animation speed for Expanding/Collapsing of Child Tabs. Valid values are one of the strings "slow", "normal", "fast".</value>
  </data>
  <data name="lblAnimated.Text" xml:space="preserve">
    <value>Animation</value>
  </data>
  <data name="lblCollapsed.Help" xml:space="preserve">
    <value>Sets whether all nodes should be collapsed by default.</value>
  </data>
  <data name="lblCollapsed.Text" xml:space="preserve">
    <value>All branches collapsed</value>
  </data>
  <data name="lblPersist.Help" xml:space="preserve">
    <value>Persists the tree's expand/collapse state in one of two ways:
"location": looks within all tree nodes with link anchors that match the document's current URL (location.href), and if found, expands that node (including its parent nodes). Great for href-based state saving.
"cookie": Saves the current state of the tree on each click to a cookie and restores that state on page load.

To disable persistence, remove this option entirely.</value>
  </data>
  <data name="lblPersist.Text" xml:space="preserve">
    <value>Persist</value>
  </data>
  <data name="lblUnique.Help" xml:space="preserve">
    <value>Sets whether only one tree node can be open at any time, collapsing any previous open nodes.</value>
  </data>
  <data name="lblUnique.Text" xml:space="preserve">
    <value>Unique Branches</value>
  </data>
  <data name="lTreeOpt.Text" xml:space="preserve">
    <value>TreeView Display Settings</value>
  </data>
  <data name="No.Text" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="None.Text" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Yes.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="lblRenderName.Help" xml:space="preserve">
    <value>Renders the Website Name as Main Root Item.</value>
  </data>
  <data name="lblRenderName.Text" xml:space="preserve">
    <value>Site Name as Root</value>
  </data>
  <data name="lPreview.Text" xml:space="preserve">
    <value>Skin Preview:</value>
  </data>
  <data name="lblHumanUrls.Help" xml:space="preserve">
    <value>Possibility to Format the Tab Links Human Friendly. For Example http://mydomain.com/Home.aspx instead of http://mydomain.com/Home/tabid/40/Default.aspx.</value>
  </data>
  <data name="lblHumanUrls.Text" xml:space="preserve">
    <value>Generate Human Friendly Urls</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>WatchersNET.SiteMap Settings</value>
  </data>
  <data name="lblError.Text" xml:space="preserve">
    <value>Skins Folder Not Found, Please Reinstall the Module</value>
  </data>
  <data name="lblDemoMode.Help" xml:space="preserve">
    <value>Enable Demo Mode (Show case). If Enabled it Show a Drop Down before the SiteMap to Switch the Skin.</value>
  </data>
  <data name="lblDemoMode.Text" xml:space="preserve">
    <value>Enable Demo Mode</value>
  </data>
  <data name="AllTerms.Text" xml:space="preserve">
    <value>Use All Terms</value>
  </data>
  <data name="CustomVocabulary.Text" xml:space="preserve">
    <value>Select Vocabularies</value>
  </data>
  <data name="lblChooseVoc.Help" xml:space="preserve">
    <value>Select from which Vocabularies you want to Use as Filter</value>
  </data>
  <data name="lblChooseVoc.Text" xml:space="preserve">
    <value>Select a Vocabulary</value>
  </data>
  <data name="lblFilterByTax.Help" xml:space="preserve">
    <value>Shows only Site Tabs where the Tab Name Contains a Tax Term.</value>
  </data>
  <data name="lblFilterByTax.Text" xml:space="preserve">
    <value>Filter Tabs by Taxonomy Tags</value>
  </data>
  <data name="lTaxOpt.Text" xml:space="preserve">
    <value>Taxonomy Terms Filter Settings</value>
  </data>
  <data name="TabTerms.Text" xml:space="preserve">
    <value>Use Terms of Current Tab</value>
  </data>
  <data name="lblUseDefaultIcon.Help" xml:space="preserve">
    <value>The Default Icon if defined will be displayed for Tabs that doesnt have an Tab Icon defined.</value>
  </data>
  <data name="lblUseDefaultIcon.Text" xml:space="preserve">
    <value>Default Tab Icon</value>
  </data>
  <data name="CustomTerms.Text" xml:space="preserve">
    <value>Select Terms</value>
  </data>
  <data name="Child.Text" xml:space="preserve">
    <value>Child</value>
  </data>
  <data name="Cookie.Text" xml:space="preserve">
    <value>Cookie</value>
  </data>
  <data name="Current.Text" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="Custom.Text" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="Fast.Text" xml:space="preserve">
    <value>Fast</value>
  </data>
  <data name="Location.Text" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="Normal.Text" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="Parent.Text" xml:space="preserve">
    <value>Parent</value>
  </data>
  <data name="Root.Text" xml:space="preserve">
    <value>Root</value>
  </data>
  <data name="Slow.Text" xml:space="preserve">
    <value>Slow</value>
  </data>
  <data name="Treeview.Text" xml:space="preserve">
    <value>TreeView</value>
  </data>
</root>